import {ConfigProvider, Divider, Radio, Skeleton} from "antd";
import Locale from 'antd/locale/ru_RU';
import {
  useGetTasksQuery,
} from "../store/Api/MocksApi/taskApiMocks.ts";
import InfiniteScroll from "react-infinite-scroll-component";
import { useCallback, useEffect, useState } from "react";
import '../../styles/TaskList.scss'
import AddTask from "../components/AddTask.tsx";
import TaskList from "../components/TaskList.tsx";

const TaskPage = () => {


  const [limit, setLimit] = useState(8); // –ù–∞—á–∏–Ω–∞–µ–º —Å 8
  const [hasMore, setHasMore] = useState(true);
  const [filter, setFilter] = useState<'all' | 'completed' | 'uncompleted' | 'favorite'>('all')



  const { data: tasks, isFetching, isSuccess } = useGetTasksQuery({
    limit: limit,
    offset: 0
  });

  useEffect(() => {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω –∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (isSuccess && tasks) {

      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞,
      // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç
      if (tasks.length < limit) {
        setHasMore(false);
      }
    }

  }, [isSuccess, tasks]);


  const loadMoreData = useCallback(() => {
    if (!isFetching && hasMore) {
      setLimit((prevLimit) => prevLimit + 8);
    }
  }, [isFetching, hasMore, limit]);




  return (
    <ConfigProvider locale={Locale}>
      <div className='tasklist-main' id="scrollableDiv">
        <div className='tasklist-main__filters-box'>
          <Radio.Group
            options={[
              { label: "–í—Å–µ", value: "all" },
              { label: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", value: "favorite" },
              { label: "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", value: "completed" },
              { label: "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", value: "uncompleted" }
            ]}
            value={filter}
            optionType={"button"}
            onChange={(e) => setFilter(e.target.value)}
          />
        </div>
        <InfiniteScroll
          dataLength={tasks?.length ?? 0}
          next={loadMoreData}
          height='400px'
          hasMore={hasMore && !isFetching}
          loader={<Skeleton paragraph={false} active />}
          endMessage={<Divider plain>–ë–æ–ª—å—à–µ –Ω–µ—Ç ü§ê</Divider>}
          scrollableTarget="scrollableDiv"
          className='tasklist-main__infinite-scroll'
        >
          <TaskList tasks={tasks ?? []} filter={filter}/>
        </InfiniteScroll>
        <AddTask />
      </div>
    </ConfigProvider>
  );
};

export default TaskPage;
